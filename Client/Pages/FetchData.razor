@page "/fetchdata"
@using BlazorApp.Shared 
@using Radzen
@using Radzen.Blazor
@inject HttpClient Http

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (data == null)
{
    <p><em>Loading...</em></p>
}
else
{
    
    

<h1>Radzen Blazor Arc Gauge</h1
<div class="row">
    <div class="col-md-6 col-sm-12 p-4">
        <RadzenArcGauge Style="width: 100%; height: 250px;">
            <RadzenArcGaugeScale Step="20" Min="0" Max="100" MinorStep="2" Radius="1.5" TickPosition=@tickPosition Y="0.9" Margin="0">
                <RadzenArcGaugeScaleValue Value=@lastHumidity ShowValue=@showValue>
                    <Template Context="pointer">
                        <h4>
                            @pointer.Value <sup>%</sup>
                        </h4>
                    </Template>
                </RadzenArcGaugeScaleValue>
            </RadzenArcGaugeScale>
        </RadzenArcGauge>
    </div>
    <div class="col-md-6 col-sm-12 p-4">
        <p>
            <label>Value <RadzenSlider Min="0" Max="100" @bind-Value=@lastHumidity /></label>
        </p>
        <p>
            <label>Show the pointer value <RadzenCheckBox @bind-Value=@showValue /></label>
        </p>
        <p>
            <label>Tick position <RadzenDropDown @bind-Value=@tickPosition Data=@tickPositions /> </label>
        </p>
    </div>
</div>
}

@code {
     bool smooth = false;
    private List<WeatherForecast> data;
    private double lastHumidity;
    bool showValue = true;
    @* double value = 100; *@
    IEnumerable<GaugeTickPosition> tickPositions = Enum.GetValues(typeof(GaugeTickPosition)).Cast<GaugeTickPosition>();
    GaugeTickPosition tickPosition = GaugeTickPosition.Outside;

    protected override async Task OnInitializedAsync()
    {
      try
      {
        data = await Http.GetFromJsonAsync<List<WeatherForecast>>("/api/record");
        lastHumidity = data.OrderByDescending(x=>x.Date).LastOrDefault().Humidity;    
      }
      catch (Exception ex)
      {
        Console.WriteLine(ex.ToString());
      }
    }
}
